---
import type { CollectionEntry } from 'astro:content'
import { formatDate } from '../utils/date'
import { render } from 'astro:content'

interface Props {
  note: CollectionEntry<'notes'>
  compact?: boolean
}

const { note, compact = false } = Astro.props
---

<a href={`/notes/${note.id}/`} class:list={['card', 'note', { compact }]} data-astro-prefetch>
  <div class="yellow-part"></div>
  <div class="dotted-line-container">
    <div class="dotted-line"></div>
  </div>

  <div class="note-content">
    <h3 class="title font-medium">{note.data.title}</h3>
    <div class="info">
      <p class="text marquee"><span>{note.data.preview}</span></p>
      <p class="note-date">{formatDate(note.data.date)}</p>
    </div>
  </div>
</a>

<style>
  .note {
    overflow: hidden;
    display: flex;
    flex-direction: column;

    border-radius: 28px;

    color: inherit;
    text-decoration: none;

    background-color: #fff;
    box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.04);
  }

  .yellow-part {
    flex-shrink: 0;
    border-bottom: 1.5px solid #eea000;
    background: linear-gradient(180deg, #fed500 0%, #fbbc00 100%);
  }

  .dotted-line-container {
    border-right: 1px solid rgba(0, 28, 70, 0.06);
    border-left: 1px solid rgba(0, 28, 70, 0.06);
  }

  .dotted-line {
    flex-shrink: 0;

    height: 5px;
    margin-top: 0.3rem;
    margin-right: 0.2rem;
    margin-left: 0.2rem;

    background-image: radial-gradient(#dddddf 1.75px, transparent 1.75px);
    background-repeat: repeat-x;
    background-position: center;
    background-size: 5px 5px;
  }

  .note-content {
    display: flex;
    flex-direction: column;
    flex-grow: 1;

    padding: 0.8rem 1.2rem;
    padding-top: 0.3rem;
    border-right: 1px solid rgba(0, 28, 70, 0.06);
    border-bottom: 1px solid rgba(0, 28, 70, 0.06);
    border-left: 1px solid rgba(0, 28, 70, 0.06);
    border-bottom-right-radius: 28px;
    border-bottom-left-radius: 28px;
  }

  .title {
    margin: 0 0 0.2rem 0;
    font-weight: 500;
  }

  .text {
    overflow: hidden;
    color: #8a8a8c;
    /* Prevent Safari from auto-adjusting text size */
    -webkit-text-size-adjust: none;
    text-size-adjust: none;
  }

  .note.compact {
    & {
      min-width: 210px;
    }
  }

  /* TODO: Rewrite to Container Query */
  .note.compact {
    .note {
      min-width: 210px;
    }

    .yellow-part {
      height: 25px;
    }

    .info {
      display: flex;
      gap: 1em;

      .note-date {
        order: 1;
        white-space: nowrap;
      }

      .text {
        position: relative;
        flex-grow: 1;
        order: 2;
      }

      .text::before {
        content: '';

        position: absolute;
        z-index: 1;
        top: 0;
        left: 0;

        width: 10px;
        height: 100%;

        background: linear-gradient(to right, #fff, transparent);
      }

      .text::after {
        content: '';

        position: absolute;
        z-index: 1;
        top: 0;
        right: 0;

        width: 10px;
        height: 100%;

        background: linear-gradient(to left, #fff, transparent);
      }

      .marquee span {
        will-change: transform;

        display: inline-block;

        width: max-content;
        padding-left: 100%;

        animation: marquee 12s linear infinite;
      }

      .marquee span:hover {
        animation-play-state: paused;
      }
    }
  }

  .note:not(.compact) {
    @media (width >= 430px) {
      .yellow-part {
        height: 25%;
      }

      .note-content {
        position: relative;
        overflow: hidden;
        padding: 1.2rem;
        padding-top: calc(1.2rem - 10px);
      }

      .info {
        display: contents;
      }

      .note-date {
        position: absolute;
        bottom: 0;
        left: 0;

        width: 100%;
        padding-top: 2rem;
        padding-bottom: 1.2rem;
        padding-left: 1.2rem;

        color: #8a898e;

        background: linear-gradient(
          to bottom,
          rgba(255, 255, 255, 0) 0%,
          rgba(255, 255, 255, 1) 45%
        );
      }
    }

    @media (width >= 430px) {
      & {
        aspect-ratio: 1/1;
      }
    }
  }

  @media (pointer: fine) {
    .note:hover {
      cursor: pointer;
    }
  }

  @media (width < 430px) {
    .note {
      min-width: 210px;
    }

    .yellow-part {
      height: 25px;
    }

    .info {
      display: flex;
      gap: 1em;

      .note-date {
        order: 1;
        white-space: nowrap;
      }

      .text {
        position: relative;
        flex-grow: 1;
        order: 2;
      }

      .text::before {
        content: '';

        position: absolute;
        z-index: 1;
        top: 0;
        left: 0;

        width: 10px;
        height: 100%;

        background: linear-gradient(to right, #fff, transparent);
      }

      .text::after {
        content: '';

        position: absolute;
        z-index: 1;
        top: 0;
        right: 0;

        width: 10px;
        height: 100%;

        background: linear-gradient(to left, #fff, transparent);
      }

      .marquee span {
        will-change: transform;

        display: inline-block;

        width: max-content;
        padding-left: 100%;

        animation: marquee 12s linear infinite;
      }

      .marquee span:hover {
        animation-play-state: paused;
      }
    }
  }

  @keyframes marquee {
    0% {
      transform: translate(0, 0);
    }
    100% {
      transform: translate(-100%, 0);
    }
  }
</style>

<script>
  const noteDates = document.querySelectorAll('.note-date')

  noteDates.forEach((dateElement) => {
    const dateText = dateElement.textContent
    const today = new Date()
    const yesterday = new Date(today)
    yesterday.setDate(yesterday.getDate() - 1)

    if (!dateText) return

    const noteDate = new Date(dateText)

    if (noteDate.toDateString() === today.toDateString()) {
      dateElement.textContent = 'Today'
    } else if (noteDate.toDateString() === yesterday.toDateString()) {
      dateElement.textContent = 'Yesterday'
    }
  })
</script>
