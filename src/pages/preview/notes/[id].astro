---
import { getCollection } from "astro:content";
import Layout from "../../../layouts/Layout.astro";
import Home from "../../../components/Home.astro";
import { render } from "astro:content";
import { formatDate } from "../../../utils/date";

export async function getStaticPaths() {
  const notes = await getCollection("notes");
  return notes.map((note) => ({
    params: { id: note.id },
    props: { note },
  }));
}

const { note } = Astro.props;
const { Content } = await render(note);
---

<Layout>
  <Home />
  <div class="note-preview-overlay" id="overlay">
    <div class="note-preview" id="preview">
      <button class="close-button" aria-label="Close preview">
        <svg
          viewBox="0 0 20 20"
          fill="currentColor"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M12.12,10l4.07-4.06a1.5,1.5,0,1,0-2.11-2.12L10,7.88,5.94,3.81A1.5,1.5,0,1,0,3.82,5.93L7.88,10,3.81,14.06a1.5,1.5,0,0,0,0,2.12,1.51,1.51,0,0,0,2.13,0L10,12.12l4.06,4.07a1.45,1.45,0,0,0,1.06.44,1.5,1.5,0,0,0,1.06-2.56Z"
            fill="currentColor"
            stroke-width="2"
            stroke-linecap="round"></path>
        </svg>
      </button>
      <article class="note-preview-content">
        <span class="note-preview-date">{formatDate(note.data.date)}</span>
        <h1 class="note-preview-title">{note.data.title}</h1>
        <Content />
      </article>
    </div>
  </div>
</Layout>

<script>
  import { navigate } from "astro:transitions/client";

  document.addEventListener("astro:page-load", () => {
    const overlay = document.getElementById("overlay");
    const closeButton = document.querySelector(".close-button");

    const handleClose = () => {
      navigate("/");
    };

    overlay?.addEventListener("click", (e) => {
      if (e.target === overlay) {
        handleClose();
      }
    });

    closeButton?.addEventListener("click", handleClose);
  });
</script>

<style>
  /* 1:1 Apple Newsroom behaviour */
  /* Prevent body scroll when overlay exists */
  :root:has(.note-preview-overlay) {
    overflow: hidden;
  }

  .note-preview-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(245, 245, 247, 0.3);
    backdrop-filter: blur(24px);
    -webkit-backdrop-filter: blur(24px);
    z-index: 1000;
    overflow-y: auto;
  }

  .note-preview {
    background-color: white;
    border-radius: 16px;
    box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 16px 0px;
    width: 816px;
    margin: 3.3em auto;
    padding-top: 24px;
  }

  .note-preview-content {
    padding-top: 20px;
    padding-bottom: 80px;
    width: 80%;
    margin: 0 auto;
  }

  .note-preview-date {
    font-size: 14px;
    letter-spacing: -0.016em;
    line-height: 1.28;
    font-weight: 600;
    display: block;
    color: #6e6e73;
    margin-bottom: 8px;
  }

  .note-preview-title {
    font-size: 32px;
    letter-spacing: 0.004em;
    line-height: 1.125;
    font-weight: 700;
    display: block;
    color: rgb(29, 29, 31);
  }

  h2 {
    margin-top: 52px;
    margin-bottom: 16px;
  }

  p {
    font-size: 24px;
  }

  @media screen and (width <= 1068px) {
    .note-preview {
      width: 692px;
    }
  }

  @media screen and (width <= 734px) {
    .note-preview {
      width: 100%;
      margin: 0;
      border-radius: unset;
    }

    .note-preview-content {
      max-width: 414px;
      width: 87.5%;
    }
  }

  .close-button {
    position: sticky;
    top: 24px;
    left: 0px;
    margin-left: 24px;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: rgba(232, 232, 237, 0.8);
    color: rgb(110, 110, 115);
    border: none;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    backdrop-filter: blur(3px);
    transition: background-color 0.1s linear color 0.1s linear;
  }

  .close-button:hover {
    background-color: #ececf0;
    color: rgba(0, 0, 0, 0.72);
  }

  .close-button svg {
    width: 17px;
    height: 17px;
  }
</style>
