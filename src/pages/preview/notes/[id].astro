---
import { getCollection } from 'astro:content'
import Layout from '../../../layouts/Layout.astro'
import Home from '../../../components/Home.astro'
import { render } from 'astro:content'
import Fog from '../../../components/Fog.astro'
import FullscreenFilled from '../../../assets/fullscreen-filled.svg'
import NoteInfo from '../../../components/NoteInfo.astro'

export async function getStaticPaths() {
  const notes = await getCollection('notes')
  return notes.map((note) => ({
    params: { id: note.id },
    props: { note },
  }))
}

const { note } = Astro.props
const { Content } = await render(note)
---

<Layout>
  <Home />
  <div class="note-preview-overlay" id="overlay">
    <div class="note-preview" id="preview">
      <button id="closeButton" class="close-button" aria-label="Close preview">
        <svg viewBox="0 0 20 20" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
          <path
            d="M12.12,10l4.07-4.06a1.5,1.5,0,1,0-2.11-2.12L10,7.88,5.94,3.81A1.5,1.5,0,1,0,3.82,5.93L7.88,10,3.81,14.06a1.5,1.5,0,0,0,0,2.12,1.51,1.51,0,0,0,2.13,0L10,12.12l4.06,4.07a1.45,1.45,0,0,0,1.06.44,1.5,1.5,0,0,0,1.06-2.56Z"
            fill="currentColor"
            stroke-width="2"
            stroke-linecap="round"></path>
        </svg>
      </button>
      <button id="fullscreenButton" class="icon-button fullscreen-button" aria-label="Fullscreen">
        <FullscreenFilled width={24} height={24} class="fullscreen-icon" />
      </button>

      <article class="note-preview-content">
        <NoteInfo date={note.data.date} title={note.data.title} preview={note.data.preview} />
        <Content />
      </article>
      <Fog />
    </div>
  </div>
</Layout>

<script>
  import { navigate } from 'astro:transitions/client'

  document.addEventListener('astro:page-load', () => {
    const pathname = window.location.pathname
    const noteId = pathname.split('/').filter(Boolean)[2]
    const overlay = document.getElementById('overlay')
    const closeButton = document.getElementById('closeButton')
    const fullscreenButton = document.getElementById('fullscreenButton')

    const handleClose = () => {
      navigate('/')
    }

    const handleFullscreen = () => {
      navigate(`/notes/${noteId}`)
    }

    overlay?.addEventListener('click', (e) => {
      if (e.target === overlay) {
        handleClose()
      }
    })

    closeButton?.addEventListener('click', handleClose)
    fullscreenButton?.addEventListener('click', handleFullscreen)
  })
</script>

<style>
  /* 1:1 Apple Newsroom behaviour */
  /* Prevent body scroll when overlay exists */
  :root:has(.note-preview-overlay) {
    overflow: hidden;
  }

  #overlay {
    z-index: 200;
  }

  .note-preview-overlay {
    position: fixed;
    z-index: 10;
    top: 0;
    left: 0;

    overflow-y: auto;

    width: 100%;
    height: 100%;

    background-color: rgba(245, 245, 247, 0.3);
    -webkit-backdrop-filter: blur(24px);
    backdrop-filter: blur(24px);
  }

  .note-preview {
    position: relative;

    width: 816px;
    margin: 3.3em auto;
    padding-top: 24px;
    border-radius: 16px;

    background-color: white;
    box-shadow: rgba(0, 0, 0, 0.2) 0px 0px 16px 0px;
  }

  .note-preview-content {
    width: 80%;
    margin: 0 auto;
    padding-top: 20px;
    padding-bottom: 80px;
  }

  .note-preview-date {
    display: block;

    font-size: 14px;
    font-weight: 600;
    line-height: 1.28;
    color: #6e6e73;
    letter-spacing: -0.016em;
  }

  .note-preview-title {
    display: block;

    padding-top: 6px;

    font-size: 32px;
    font-weight: 700;
    line-height: 1.125;
    color: rgb(29, 29, 31);
    letter-spacing: 0.004em;
  }

  .note-preview-description {
    padding-top: 6px;
    font-size: 1rem;
  }

  .link-buttons-container {
    display: flex;
    gap: 8px;
    align-items: center;

    margin-left: -6px;
    padding-top: 24px;
  }

  .icon-button {
    cursor: pointer;

    display: flex;
    align-items: center;
    justify-content: center;

    border: none;

    background-color: transparent;
  }

  .icon-button svg {
    color: rgb(110, 110, 115);
    transition: color 0.3s cubic-bezier(0.4, 0, 0.25, 1) 0ms;
  }

  .icon-button.filled svg {
    fill: currentColor;
  }

  .icon-button:hover svg {
    color: rgb(29, 29, 31);
  }

  .link-button {
    padding: 6px;
    border-radius: 50%;
    text-decoration: none;
  }

  .close-button {
    cursor: pointer;

    position: sticky;
    top: 24px;
    left: 0px;

    display: flex;
    align-items: center;
    justify-content: center;

    width: 36px;
    height: 36px;
    margin-left: 24px;
    border: none;
    border-radius: 50%;

    color: rgb(110, 110, 115);

    background-color: rgba(232, 232, 237, 0.8);
    backdrop-filter: blur(3px);

    transition: background-color 0.1s linear color 0.1s linear;
  }

  .close-button:hover {
    color: rgba(0, 0, 0, 0.72);
    background-color: #ececf0;
  }

  .close-button svg {
    width: 17px;
    height: 17px;
  }

  .fullscreen-button {
    position: absolute;
    top: 0px;
    right: 0px;
    padding: 12px;
  }

  .fullscreen-button svg {
    transition: transform 0.2s cubic-bezier(0.65, 0, 0.35, 1);
  }

  .fullscreen-button:hover svg {
    transform: scale(1.15);
  }

  @media screen and (width <= 1068px) {
    .note-preview {
      width: 692px;
    }
  }

  @media screen and (width <= 734px) {
    .note-preview {
      width: 100%;
      margin: 0;
      border-radius: unset;
    }

    .note-preview-content {
      width: 87.5%;
      max-width: 414px;
    }
  }
</style>
